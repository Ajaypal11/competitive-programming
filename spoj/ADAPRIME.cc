#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <cassert>
#include <map>

using int64 = long long;
using uint64 = unsigned long long;

constexpr uint64 mask[64] = {
  0x0000000000000001ull,0x0000000000000002ull,0x0000000000000004ull,0x0000000000000008ull,
  0x0000000000000010ull,0x0000000000000020ull,0x0000000000000040ull,0x0000000000000080ull,
  0x0000000000000100ull,0x0000000000000200ull,0x0000000000000400ull,0x0000000000000800ull,
  0x0000000000001000ull,0x0000000000002000ull,0x0000000000004000ull,0x0000000000008000ull,
  0x0000000000010000ull,0x0000000000020000ull,0x0000000000040000ull,0x0000000000080000ull,
  0x0000000000100000ull,0x0000000000200000ull,0x0000000000400000ull,0x0000000000800000ull,
  0x0000000001000000ull,0x0000000002000000ull,0x0000000004000000ull,0x0000000008000000ull,
  0x0000000010000000ull,0x0000000020000000ull,0x0000000040000000ull,0x0000000080000000ull,
  0x0000000100000000ull,0x0000000200000000ull,0x0000000400000000ull,0x0000000800000000ull,
  0x0000001000000000ull,0x0000002000000000ull,0x0000004000000000ull,0x0000008000000000ull,
  0x0000010000000000ull,0x0000020000000000ull,0x0000040000000000ull,0x0000080000000000ull,
  0x0000100000000000ull,0x0000200000000000ull,0x0000400000000000ull,0x0000800000000000ull,
  0x0001000000000000ull,0x0002000000000000ull,0x0004000000000000ull,0x0008000000000000ull,
  0x0010000000000000ull,0x0020000000000000ull,0x0040000000000000ull,0x0080000000000000ull,
  0x0100000000000000ull,0x0200000000000000ull,0x0400000000000000ull,0x0800000000000000ull,
  0x1000000000000000ull,0x2000000000000000ull,0x4000000000000000ull,0x8000000000000000ull
};

uint64 is_prime[(1 << 30) / 128];
constexpr int max_primes = 6536;
constexpr int sieve_span = 1 << 19;
constexpr int sieve_words = sieve_span / 128;
constexpr int wheel_size = 3 * 5 * 7 * 11 * 13;

int primes[max_primes];
uint64 sieve[sieve_words];
uint64 pattern[wheel_size];

inline void mark_1(uint64 *s, int o) {s[o >> 6] |= uint64(1) << (o & 63);}
inline void mark_2(uint64 *s, int o) {s[o >> 6] |= mask[o & 63];}
inline void unmark(uint64 *s, int o) {s[o >> 6] &= ~mask[o * 63];}
inline int test_1(uint64 *s, int o) {return (s[o >> 6] & (uint64(1) << (o & 63))) == 0;}
inline int test_2(uint64 *s, int o) {return (s[o >> 6] & mask[o & 63]) == 0;}

void fast_sieve() {
  for (int i = 0; i < 65536 / 128; ++i) sieve[i] = 0;  
  for (int i = 3; i < 256; i += 2) {
    if (test_2(sieve, i >> 1)) {
      for (int j = i * i / 2; j < 32768; j += i) mark_2(sieve, j);
    }
  }
  int m = 0;
  for (int i = 8; i < 32768; ++i) {
    if (test_2(sieve, i)) primes[m++] = i * 2 + 1;
  }
  assert(m == max_primes);
  for (int i = 0; i < wheel_size; ++i) pattern[i] = 0;
  for (int i = 1; i < wheel_size * 64; i += 3) mark_2(pattern, i);
  for (int i = 2; i < wheel_size * 64; i += 5) mark_2(pattern, i);
  for (int i = 3; i < wheel_size * 64; i += 7) mark_2(pattern, i);
  for (int i = 5; i < wheel_size * 64; i += 11) mark_2(pattern, i);
  for (int i = 6; i < wheel_size * 64; i += 13) mark_2(pattern, i);

  auto update_sieve = [&](int base) {
    int o = base % wheel_size;
    o = (o + ((o * 105) & 127) * wheel_size) >> 7;
    for (int i = 0, j, k; i < sieve_words; i += k, o = 0) {
      k = std::min(wheel_size - o, sieve_words - i);
      memcpy(sieve + i, pattern + o, sizeof(*pattern) * k);
    }
    if (base == 0) { // mark 1 as not prime, and mark 3, 5, 7, 11, and 13 as prime
      sieve[0] |= mask[0];
      sieve[0] &= ~(mask[1] | mask[2] | mask[3] | mask[5] | mask[6]);
    }
    for (int i = 0; i < max_primes; ++i) {
      int j = primes[i] * primes[i];
      if (j > base + sieve_span - 1) break;
      if (j > base) j = (j - base) >> 1;
      else {
        j = primes[i] - base % primes[i];
        if ((j & 1) == 0) j += primes[i];
        j >>= 1;
      }
      while (j < sieve_span / 2) {
        mark_2(sieve, j);
        j += primes[i];
      }
    }
    memcpy(is_prime + (base / 128), sieve, sizeof(sieve));
  };

  int cnt = 0;
  for (int base = 0; base < (1 << 30); base += sieve_span) {
    update_sieve(base);
  }
}

constexpr int ans[] = {0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 2, 1, 0, 1, 2, 0, 0, 4, 16, 1, 0, 0, 0, 0, 0, 2, 1, 1, 1, 0, 0, 1, 3, 6, 15, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 7, 13, 3, 3, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 2, 0, 0, 0, 0, 2, 0, 0, 0, 3, 6, 2, 2, 2, 12, 0, 0, 11, 67, 0, 0, 0, 0, 0, 0, 2, 6, 2, 1, 0, 0, 1, 6, 20, 58, 0, 0, 4, 6, 0, 0, 0, 0, 0, 0, 23, 54, 6, 23, 0, 0, 1, 0, 2, 2, 0, 0, 2, 1, 2, 1, 3, 4, 0, 0, 11, 20, 1, 0, 0, 0, 0, 1, 7, 14, 2, 4, 0, 0, 7, 12, 25, 90, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 4, 14, 8, 15, 0, 0, 2, 3, 9, 17, 0, 0, 22, 66, 6, 8, 23, 83, 0, 0, 97, 472, 1, 1, 3, 2, 0, 0, 6, 16, 2, 6, 8, 14, 0, 0, 31, 90, 2, 1, 0, 0, 4, 5, 15, 47, 5, 12, 0, 0, 22, 52, 101, 456, 0, 0, 5, 12, 2, 8, 0, 0, 0, 0, 24, 80, 17, 57, 0, 0, 4, 4, 16, 58, 0, 0, 65, 244, 14, 45, 98, 450, 0, 0, 534, 2668, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0, 2, 2, 6, 13, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 8, 4, 7, 0, 0, 0, 0, 0, 3, 0, 0, 4, 8, 1, 1, 6, 14, 0, 0, 20, 56, 0, 0, 0, 0, 0, 0, 6, 30, 4, 8, 0, 0, 6, 27, 69, 298, 0, 0, 0, 0, 0, 0, 1, 8, 2, 1, 0, 0, 4, 4, 16, 65, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0, 19, 58, 12, 27, 0, 0, 0, 0, 2, 8, 0, 0, 8, 24, 2, 3, 20, 55, 0, 0, 88, 294, 0, 0, 0, 0, 0, 0, 31, 148, 10, 36, 0, 0, 28, 147, 353, 1799, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 6, 20, 5, 12, 0, 0, 1, 0, 8, 15, 0, 0, 14, 64, 2, 11, 24, 86, 0, 0, 114, 457, 2, 2, 0, 0, 3, 10, 17, 53, 7, 11, 0, 0, 16, 48, 94, 431, 0, 0, 16, 63, 9, 33, 0, 0, 0, 0, 111, 491, 81, 285, 0, 0, 0, 0, 6, 11, 4, 5, 0, 0, 0, 0, 26, 85, 10, 55, 0, 0, 2, 3, 19, 55, 0, 0, 65, 285, 14, 61, 131, 448, 0, 0, 526, 2742, 2, 8, 0, 0, 9, 27, 61, 283, 16, 53, 0, 0, 72, 289, 518, 2746, 0, 0, 70, 307, 26, 171, 0, 0, 0, 0, 505, 2728, 371, 1850, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 6, 2, 5, 0, 0, 0, 1, 4, 5, 0, 0, 6, 16, 2, 5, 9, 12, 0, 0, 24, 73, 1, 1, 0, 0, 0, 1, 3, 10, 3, 3, 0, 0, 6, 16, 27, 83, 0, 0, 7, 5, 3, 5, 0, 0, 0, 0, 37, 95, 19, 58, 0, 0, 0, 0, 2, 4, 1, 3, 0, 0, 0, 0, 5, 16, 4, 19, 0, 0, 0, 0, 3, 14, 0, 0, 16, 43, 4, 15, 25, 72, 0, 0, 116, 445, 2, 0, 0, 0, 2, 6, 17, 50, 4, 13, 0, 0, 17, 54, 105, 467, 0, 0, 13, 53, 9, 26, 0, 0, 0, 0, 99, 437, 78, 277, 0, 0, 2, 2, 4, 6, 0, 0, 11, 23, 4, 5, 7, 30, 0, 0, 36, 108, 2, 1, 0, 0, 3, 15, 21, 86, 9, 20, 0, 0, 27, 79, 148, 590, 0, 0, 10, 16, 7, 12, 0, 0, 0, 0, 34, 115, 33, 93, 0, 0, 8, 13, 28, 87, 0, 0, 99, 420, 16, 86, 133, 590, 0, 0, 665, 3514, 2, 5, 7, 11, 0, 0, 23, 87, 9, 18, 32, 104, 0, 0, 124, 568, 5, 8, 0, 0, 22, 65, 107, 440, 18, 85, 0, 0, 116, 448, 685, 3741, 0, 0, 24, 93, 20, 46, 0, 0, 0, 0, 137, 562, 104, 451, 0, 0, 14, 59, 102, 437, 0, 0, 560, 2741, 113, 449, 663, 3637, 0, 0, 4333, 26519, 1, 1, 0, 0, 1, 2, 5, 11, 3, 4, 0, 0, 5, 14, 32, 79, 0, 0, 3, 16, 2, 8, 0, 0, 0, 0, 29, 74, 11, 51, 0, 0, 1, 1, 4, 13, 0, 0, 20, 52, 2, 15, 27, 68, 0, 0, 127, 386, 1, 5, 0, 0, 11, 26, 69, 294, 18, 50, 0, 0, 77, 271, 526, 2812, 0, 3, 0, 0, 4, 7, 22, 52, 5, 12, 0, 0, 19, 42, 99, 394, 0, 0, 13, 66, 8, 32, 0, 0, 0, 0, 102, 424, 79, 314, 0, 0, 2, 7, 12, 48, 0, 0, 69, 312, 18, 62, 109, 480, 0, 0, 512, 2699, 6, 35, 0, 0, 35, 157, 343, 1817, 78, 302, 0, 0, 347, 1817, 3194, 19917, 0, 0, 10, 19, 5, 9, 0, 0, 0, 0, 39, 121, 24, 75, 0, 0, 3, 14, 27, 91, 0, 0, 114, 445, 22, 82, 136, 588, 0, 0, 727, 3681, 7, 12, 0, 0, 15, 50, 108, 467, 27, 83, 0, 0, 98, 460, 731, 3762, 0, 0, 87, 410, 82, 290, 0, 0, 0, 0, 708, 3488, 502, 2705, 0, 0, 0, 0, 25, 82, 25, 51, 0, 0, 0, 0, 141, 584, 109, 461, 0, 0, 16, 48, 103, 424, 0, 0, 528, 2763, 87, 398, 669, 3554, 0, 0, 4097, 26493, 16, 43, 0, 0, 65, 270, 494, 2805, 88, 432, 0, 0, 554, 2748, 4168, 26285, 0, 0, 512, 2793, 317, 1818, 0, 0, 0, 0, 4192, 26455, 3098, 19558, 0, 0};

int main() {
  fast_sieve();
  int T;
  scanf("%d", &T);
  for (int cas = 1; cas <= T; ++cas) {
    int n, a[10];
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) {
      scanf("%d", &a[i]);
    }
    std::sort(a, a + n);
    bool valid = 1;
    for (int i = 1; i < n; ++i) {
      if (a[i] == a[i - 1]) valid = 0;
    }
    if (valid) {
      int mask = 0;
      for (int i = 0; i < n; ++i) mask |= 1 << a[i];
      printf("%d\n", ans[mask]);
      continue;
    }
    if (a[n - 1] == 0) {
      puts("0");
      continue;
    }
    for (int i = 0; i < n; ++i) {
      if (a[i]) {
        std::swap(a[i], a[0]);
        break;
      }
    }
    int ret = 0;
    do {
      if (a[n - 1] % 2 == 0 || a[n - 1] == 5) continue;
      int64 v = 0;
      for (int i = 0; i < n; ++i) v = v * 10 + a[i];
      ret += test_1(is_prime, v / 2);
    } while (std::next_permutation(a, a + n));
    printf("%d\n", ret);
  }
  return 0;
}
